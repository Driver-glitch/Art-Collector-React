{"version":3,"sources":["api/index.js","components/Feature.js","components/Preview.js","components/Search.js","components/Title.js","components/Loading.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","results","console","error","Feature","featuredResult","id","title","dated","primaryimageurl","images","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","map","person","displayname","src","alt","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","disabled","prev","next","record","index","key","Search","useState","centuryList","setCenturyList","setCentury","classificationList","setClassificationList","setQueryString","setClassification","useEffect","Promise","all","then","centuries","classifications","onSubmit","log","htmlFor","type","placeholder","onChange","target","length","name","Title","Loading","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26c7a2de.chunk.js","sourcesContent":["/**\r\n * This file features and exports all of your calls to the API\r\n * \r\n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\r\n */\r\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\r\nexport const KEY = 'apikey=e30c9c81-8dfe-4655-b10d-2552b145825d';\r\n\r\n/**\r\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\r\n */\r\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\r\n  try {\r\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\r\n */\r\nexport async function fetchQueryResultsFromURL(url) {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\r\n * \r\n * Then makes a call to the API, and returns the first page of results\r\n */\r\nexport async function fetchQueryResults({\r\n  century,\r\n  classification,\r\n  queryString,\r\n}) {\r\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \r\n    century }&keyword=${ queryString }`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\r\n */\r\nexport async function fetchAllCenturies() {\r\n  if (localStorage.getItem('centuries')) {\r\n    return JSON.parse(localStorage.getItem('centuries'));\r\n  }\r\n\r\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem('centuries', JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \r\n */\r\nexport async function fetchAllClassifications() {\r\n  if (localStorage.getItem('classifications')) {\r\n    return JSON.parse(localStorage.getItem('classifications'));\r\n  }\r\n\r\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem('classifications', JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}","import React, { Fragment } from \"react\";\r\n\r\n// Don't touch this import\r\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\r\n\r\n//   We need a new component called Searchable which:\r\n\r\n//   Has a template like this:\r\n\r\n//   <span className=\"content\" >\r\n//    <a href=\"#\" onClick={async (event) => {\r\n//        event.preventDefault();\r\n//        Searchable = event.target.value;\r\n//    }}>SOME SEARCH TERM </a>\r\n\r\n//  </span>\r\n\r\n//  * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\r\n//  *\r\n//  * When someone clicks the anchor tag, you should:\r\n//  *\r\n//  * - preventDefault on the event\r\n//  * - call setIsLoading, set it to true\r\n//  *\r\n//  * Then start a try/catch/finally block:\r\n//  *\r\n//  * try:\r\n//  *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\r\n//  *  - send the result to setSearchResults (which will update the Preview component)\r\n//  * catch:\r\n//  *  - console.error the error\r\n//  * finally:\r\n//  *  - call setIsLoading, set it to false\r\n//  */\r\nconst Searchable = (props) => {\r\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props;\r\n  return (\r\n    <div>\r\n      <span className=\"content\">\r\n        <a\r\n          href=\"#\"\r\n          onClick={async (event) => {\r\n            event.preventDefault();\r\n            setIsLoading(true);\r\n\r\n            try {\r\n              const results = await fetchQueryResultsFromTermAndValue(\r\n                searchTerm,\r\n                searchValue\r\n              );\r\n              setSearchResults(results);\r\n            } catch (error) {\r\n              console.error(error);\r\n            } finally {\r\n              setIsLoading(false);\r\n            }\r\n          }}\r\n        ></a>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\n// /**\r\n//  * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\r\n//  *\r\n//  * <main id=\"feature\"></main>\r\n//  *\r\n//  * And like this when one is:\r\n//  *\r\n//  * <main id=\"feature\">\r\n//  *   <div className=\"object-feature\">\r\n//  *     <header>\r\n//  *       <h3>OBJECT TITLE</h3>\r\n//  *       <h4>WHEN IT IS DATED</h4>\r\n//  *     </header>\r\n//  *     <section className=\"facts\">\r\n//  *       <span className=\"title\">FACT NAME</span>\r\n//  *       <span className=\"content\">FACT VALUE</span>\r\n//  *       <span className=\"title\">NEXT FACT NAME</span>\r\n//  *       <span className=\"content\">NEXT FACT VALUE</span>\r\n//  *     </section>\r\n//  *     <section className=\"photos\">\r\n//  *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\r\n//  *     </section>\r\n//  *   </div>\r\n//  * </main>\r\n//  *\r\n//  * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style,\r\n//  * technique, medium, dimensions, people, department, division, contact, creditline\r\n//  *\r\n//  * The <Searchable /> ones are: culture, technique,\r\n// medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\r\n//  *\r\n//  * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\r\n//  *\r\n//  * This component should be exported as default.\r\n//  */\r\nconst Feature = (props) => {\r\n  const { featuredResult } = props;\r\n\r\n  if (!featuredResult) {\r\n    return <main id=\"feature\"></main>;\r\n  }\r\n  const {\r\n    title,\r\n    dated,\r\n    images,\r\n    primaryimageurl,\r\n    description,\r\n    culture,\r\n    style,\r\n    technique,\r\n    medium,\r\n    dimensions,\r\n    people,\r\n    department,\r\n    division,\r\n    contact,\r\n    creditline,\r\n  } = featuredResult;\r\n\r\n  return (\r\n    <main id=\"feature\">\r\n      <div className=\"object-feature\">\r\n        <header>\r\n          <h3>{title}</h3>\r\n          <h4>{dated}</h4>\r\n        </header>\r\n        <section className=\"facts\">\r\n          {description ? (\r\n            <Fragment>\r\n              <span className=\"title\">Description</span>\r\n              <span className=\"content\">{description}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {culture ? (\r\n            <Fragment>\r\n              <span className=\"title\">Culture</span>\r\n              <span className=\"content\">{culture}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {style ? (\r\n            <Fragment>\r\n              <span className=\"title\">Style</span>\r\n              <span className=\"content\">{style}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {technique ? (\r\n            <Fragment>\r\n              <span className=\"title\">Technique</span>\r\n              <span className=\"content\">{technique}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {medium ? (\r\n            <Fragment>\r\n              <span className=\"title\">Medium</span>\r\n              <span className=\"content\">{medium}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {dimensions ? (\r\n            <Fragment>\r\n              <span className=\"title\">Dimensions</span>\r\n              <span className=\"content\">{dimensions}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {people\r\n            ? people.map((person) => {\r\n                return (\r\n                  <Fragment>\r\n                    <span className=\"title\">Person</span>\r\n                    <Searchable\r\n                      searchTerm=\"person\"\r\n                      searchValue={person.displayname}\r\n                      {...props}\r\n                    />\r\n                  </Fragment>\r\n                );\r\n              })\r\n            : null}\r\n    \r\n          {department ? (\r\n            <Fragment>\r\n              <span className=\"title\">Department</span>\r\n              <span className=\"content\">{department}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {division ? (\r\n            <Fragment>\r\n              <span className=\"title\">Division</span>\r\n              <span className=\"content\">{division}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {contact ? (\r\n            <Fragment>\r\n              <span className=\"title\">Contact</span>\r\n              <span className=\"content\">{contact}</span>\r\n            </Fragment>\r\n          ) : null}\r\n          {creditline ? (\r\n            <Fragment>\r\n              <span className=\"title\">Creditline</span>\r\n              <span className=\"content\">{creditline}</span>\r\n            </Fragment>\r\n          ) : null}\r\n        </section>\r\n        <section className=\"photos\">\r\n          <img src={primaryimageurl} alt={\"SOMETHING_WORTHWHILE\"} />\r\n        </section>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Feature;\r\n","import React from \"react\";\r\n/**\r\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\r\n * which are query urls.\r\n */\r\nimport { fetchQueryResultsFromURL } from \"../api\";\r\nconst Preview = (props) => {\r\n  const { setSearchResults, setFeaturedResult, setIsLoading } = props;\r\n\r\n  /**\r\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\r\n   * and also destructure info and records from props.searchResults\r\n   *\r\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\r\n   */\r\n  const { info, records } = props.searchResults;\r\n  /**\r\n   * Don't touch this function, it's good to go.\r\n   *\r\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\r\n   */\r\n  async function fetchPage(pageUrl) {\r\n    setIsLoading(true);\r\n    try {\r\n      const results = await fetchQueryResultsFromURL(pageUrl);\r\n      setSearchResults(results);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n  return (\r\n    <aside id=\"preview\">\r\n      <header className=\"pagination\">\r\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\r\n        <button\r\n          disabled={!info.prev}\r\n          className=\"previous\"\r\n          onClick={() => {\r\n            fetchPage(info.prev);\r\n          }}\r\n        >\r\n          Previous\r\n        </button>\r\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\r\n        <button\r\n          disabled={!info.next}\r\n          className=\"next\"\r\n          onClick={() => {\r\n            fetchPage(info.next);\r\n          }}\r\n        >\r\n          Next\r\n        </button>\r\n      </header>\r\n      <section className=\"results\">\r\n        {\r\n          //Here we should map over the records, and render something like this for each one:\r\n          records.map((record, index) => {\r\n            return (\r\n              <div\r\n                key={index}\r\n                className=\"object-preview\"\r\n                onClick={(event) => {\r\n                  // prevent the default\r\n                  event.preventDefault();\r\n                  // event.primaryimageurl;\r\n                  setFeaturedResult(record);\r\n\r\n                  // set the featured result to be this record, using setFeaturedResult\r\n                }}\r\n              >\r\n                {/* if the record.primaryimageurl exists, show this:{\" \"},otherwise show nothing */}\r\n                {record.primaryimageurl ? (\r\n                  <img src={record.primaryimageurl} alt={record.description} />\r\n                ) : null}\r\n                \r\n                {record.title\r\n                  ? <h3>{record.title}</h3>\r\n                  : <h3>MISSING INFO</h3>}\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n      </section>\r\n    </aside>\r\n  );\r\n};\r\nexport default Preview;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n/**\r\n * Don't touch these imports!\r\n */\r\nimport { \r\n  fetchAllCenturies,\r\n  fetchAllClassifications,\r\n  fetchQueryResults\r\n} from '../api';\r\n\r\nconst Search = ({setIsLoading, setSearchResults}) => {\r\n\r\n  // const {setIsLoading, setSearchResults} = props\r\n  // const setIsLoading = props.setIsLoading\r\n  // const setSearchResults = props.setSearchResults\r\n\r\n  const [centuryList, setCenturyList] = useState([])\r\n   const [century, setCentury] = useState('any')\r\n   const [classificationList,setClassificationList] = useState([])\r\n    const [queryString, setQueryString] = useState('')\r\n    const [classification, setClassification] = useState('any')\r\n  \r\n  // Make sure to destructure setIsLoading and setSearchResults from the props\r\n\r\n\r\n  \r\n  //  We are at the Search component, a child of app. This has a form, so we need to use useState for\r\n  //   our controlled inputs:\r\n    \r\n  //   centuryList, setCenturyList (default should be an empty array, []\r\n  //   classificationList, setClassificationList (default should be an empty array, [])\r\n  //   queryString, setQueryString (default should be an empty string, '')\r\n  //   century, setCentury (default should be the string 'any')\r\n  //   classification, setClassification (default should be the string 'any')\r\n   \r\n\r\n\r\n  /**\r\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\r\n   * \r\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\r\n   * \r\n   * Make sure to console.error on caught errors from the API methods.\r\n   */\r\n  useEffect(() => {\r\n    try {\r\n\r\n      Promise.all([fetchAllCenturies () , fetchAllClassifications ()])\r\n\r\n      .then(([ centuries, classifications ]) => {\r\n              setCenturyList(centuries)\r\n              setClassificationList(classifications)\r\n\r\n      })\r\n      \r\n    }catch {\r\n      console.error()\r\n    } \r\n  \r\n\r\n    \r\n  }\r\n  , []);\r\n\r\n  /**\r\n   * This is a form element, so we need to bind an onSubmit handler to it which:\r\n   * \r\n   * calls event.preventDefault()\r\n   * calls setIsLoading, set it to true\r\n   * \r\n   * then, in a try/catch/finally block:\r\n   * \r\n   * try to:\r\n   * - get the results from fetchQueryResults({ century, classification, queryString })\r\n   * - pass them to setSearchResults\r\n   * \r\n   * catch: error to console.error\r\n   * \r\n   * finally: call setIsLoading, set it to false\r\n   */\r\n  return <form id=\"search\" onSubmit={async (event) => {\r\n    event.preventDefault()\r\n    setIsLoading(true)\r\n    try {\r\n      setSearchResults( await fetchQueryResults({century, classification, queryString}))\r\n    } catch (error) {\r\n      console.log(error)\r\n    }finally {\r\n      setIsLoading(false)\r\n    }\r\n  }}>\r\n    <fieldset>\r\n      <label htmlFor=\"keywords\">Query</label>\r\n      <input \r\n        id=\"keywords\" \r\n        type=\"text\" \r\n        placeholder=\"enter keywords...\" \r\n        value={queryString} \r\n        onChange={(event) =>setQueryString(event.target.value)}/>\r\n    </fieldset>\r\n    <fieldset>\r\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\r\n      <select \r\n        name=\"classification\"\r\n        id=\"select-classification\"\r\n        value={classification} \r\n        onChange={(event)=>setClassification(event.target.value)}>\r\n        <option value=\"any\">Any</option>\r\n        {\r\n       \r\n        classificationList.map((classification, index) => {\r\n          return <option key = {index+ \"classification\"} value = {classification.name}> {classification.name}  </option>\r\n        })\r\n      }\r\n        </select>\r\n    </fieldset>\r\n    <fieldset>\r\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\r\n      <select \r\n        name=\"century\" \r\n        id=\"select-century\"\r\n        value={century} \r\n        onChange={(event)=>setCentury(event.target.value)}>\r\n        <option value=\"any\">Any</option>\r\n        {\r\n      \r\n        //map over the centuryList, return an <option />\r\n          centuryList.map(( century, index ) => {\r\n            return <option key = {index+ \"century\"} value = {century.name}> {century.name} </option>\r\n          })\r\n        }\r\n      \r\n      </select>\r\n     </fieldset>\r\n    <button>SEARCH</button>\r\n  </form>\r\n}\r\n\r\nexport default Search;\r\n\r\n","import React from 'react';\r\n\r\n\r\n //Create/export a component called Title which uses this static HTML as the template:\r\n const Title = () => {\r\n  return (  \r\n<div id=\"title\">\r\n    <h1>\r\n      The Art Collector\r\n    </h1>\r\n    <h5>\r\n      Search the Harvard Art Museums' Private Collections\r\n    </h5>\r\n  </div>\r\n  );\r\n }\r\n  \r\n \r\n\r\n export default Title;","import React from 'react';\r\n\r\n\r\n  //Create and export a component called Loading which uses this static HTML template:\r\n  const Loading = () => {\r\n      \r\nreturn <div id=\"loading\">\r\n   <h2 className=\"message\">Searching...</h2>\r\n  </div>\r\n\r\n  }\r\n  \r\n \r\n\r\n export default Loading;","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// These imports won't work until you fix ./components/index.js\r\nimport {\r\n  Feature,\r\n  Loading,\r\n  Preview,\r\n  Search,\r\n  Title\r\n} from './components';\r\n\r\nconst App = () => {\r\n  /**\r\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\r\n   * be made here, so create state pairs using useState() for:\r\n   * \r\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\r\n   * featuredResult, setFeaturedResult (default should be null)\r\n   * isLoading, setIsLoading (default should be false)\r\n   */\r\n \r\n\r\n     const [searchResults, setSearchResults] = useState( {info: {}, records: []})\r\n     const [featuredResult, setFeaturedResult] = useState(null)\r\n     const [isLoading, setIsLoading] = useState(false)\r\n\r\n\r\n     return <div className=\"app\">\r\n     {/* <Title /> is static, doesn't need any props */}\r\n     <Title />\r\n     {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\r\n     <Search \r\n     setIsLoading={setIsLoading}\r\n     setSearchResults={setSearchResults}\r\n     />\r\n     {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\r\n     { <Preview \r\n     searchResults={searchResults}\r\n     setIsLoading={setIsLoading}\r\n     setSearchResults={setSearchResults}\r\n     setFeaturedResult={setFeaturedResult}\r\n     /> }\r\n     {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\r\n      {\r\n    <Feature \r\n     featuredResult={featuredResult}\r\n     setIsLoading={setIsLoading}\r\n     setSearchResults={setSearchResults}\r\n     /> } \r\n     {/* <Loading /> is static, but should only render when isLoading is true */}\r\n     {/*use a ternary and render null if isLoading is false*/}\r\n     {\r\n       isLoading ? <Loading /> : null\r\n     }\r\n   </div>\r\n }\r\n\r\n\r\n/**\r\n * Boostrap the <App /> component into the '#app' element in the DOM,\r\n * using ReactDOM.render();\r\n */\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"app\"))"],"sourceRoot":""}